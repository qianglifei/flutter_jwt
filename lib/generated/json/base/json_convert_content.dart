// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:jwt/entity/login_response_entity.dart';
import 'package:jwt/generated/json/login_response_entity_helper.dart';
import 'package:jwt/main/first_page/people_online_check/people_online_check_response_entity.dart';
import 'package:jwt/generated/json/people_online_check_response_entity_helper.dart';
import 'package:jwt/main/team_management/team_choose/police_response_entity.dart';
import 'package:jwt/generated/json/police_response_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
		switch (type) {
			case LoginResponseEntity:
				return loginResponseEntityFromJson(data as LoginResponseEntity, json) as T;
			case PeopleOnlineCheckResponseEntity:
				return peopleOnlineCheckResponseEntityFromJson(data as PeopleOnlineCheckResponseEntity, json) as T;
			case PeopleOnlineCheckResponseReturnData:
				return peopleOnlineCheckResponseReturnDataFromJson(data as PeopleOnlineCheckResponseReturnData, json) as T;
			case PoliceResponseEntity:
				return policeResponseEntityFromJson(data as PoliceResponseEntity, json) as T;
			case PoliceResponseMjxx:
				return policeResponseMjxxFromJson(data as PoliceResponseMjxx, json) as T;    }
		return data as T;
	}

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case LoginResponseEntity:
				return loginResponseEntityToJson(data as LoginResponseEntity);
			case PeopleOnlineCheckResponseEntity:
				return peopleOnlineCheckResponseEntityToJson(data as PeopleOnlineCheckResponseEntity);
			case PeopleOnlineCheckResponseReturnData:
				return peopleOnlineCheckResponseReturnDataToJson(data as PeopleOnlineCheckResponseReturnData);
			case PoliceResponseEntity:
				return policeResponseEntityToJson(data as PoliceResponseEntity);
			case PoliceResponseMjxx:
				return policeResponseMjxxToJson(data as PoliceResponseMjxx);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (LoginResponseEntity).toString()){
			return LoginResponseEntity().fromJson(json);
		}
		if(type == (PeopleOnlineCheckResponseEntity).toString()){
			return PeopleOnlineCheckResponseEntity().fromJson(json);
		}
		if(type == (PeopleOnlineCheckResponseReturnData).toString()){
			return PeopleOnlineCheckResponseReturnData().fromJson(json);
		}
		if(type == (PoliceResponseEntity).toString()){
			return PoliceResponseEntity().fromJson(json);
		}
		if(type == (PoliceResponseMjxx).toString()){
			return PoliceResponseMjxx().fromJson(json);
		}

		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<LoginResponseEntity>[] is M){
			return data.map<LoginResponseEntity>((e) => LoginResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PeopleOnlineCheckResponseEntity>[] is M){
			return data.map<PeopleOnlineCheckResponseEntity>((e) => PeopleOnlineCheckResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PeopleOnlineCheckResponseReturnData>[] is M){
			return data.map<PeopleOnlineCheckResponseReturnData>((e) => PeopleOnlineCheckResponseReturnData().fromJson(e)).toList() as M;
		}
		if(<PoliceResponseEntity>[] is M){
			return data.map<PoliceResponseEntity>((e) => PoliceResponseEntity().fromJson(e)).toList() as M;
		}
		if(<PoliceResponseMjxx>[] is M){
			return data.map<PoliceResponseMjxx>((e) => PoliceResponseMjxx().fromJson(e)).toList() as M;
		}

		throw Exception("not found");
	}

  static M fromJsonAsT<M>(json) {
		if (json is List) {
			return _getListChildType<M>(json);
		} else {
			return _fromJsonSingle<M>(json) as M;
		}
	}
}